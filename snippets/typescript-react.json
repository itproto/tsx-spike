{
  "SFC": {
    "prefix": "itp-sfc",
    "description": "SFC",
    "body": [
      "import * as React from \"react\";",
      "",
      "interface I${1}Props {",
      "\tlabel: string;",
      "\tonIncrement: () => any;",
      "}",
      "",
      "export const ${1}: React.SFC<I${1}Props> = ({ label, onIncrement }) => (",
      "\t<div>${0}</div>",
      ");"
    ]
  },
  "SFC with handler": {
    "prefix": "itp-sfc-handler",
    "description": "SFC with handler",
    "body": [
      "import * as React from \"react\";",
      "",
      "export interface ${1}Props {",
      "\tlabel: string;",
      "\tcount: number;",
      "\tonIncrement: () => any;",
      "}",
      "",
      "export const ${1}: React.SFC<${1}Props> = ({ label, count, onIncrement }) => {",
      "\tconst handleIncrement = () => {",
      "\t\tonIncrement();",
      "\t};",
      "",
      "\treturn (",
      "\t\t<div>",
      "\t\t\t{label}: {count} <button type=\"button\" onClick={handleIncrement} />",
      "\t\t</div>",
      "\t);",
      "};",
      "$0"
    ]
  },
  "SFC Spread Attributes": {
    "prefix": "itp-sfc-spread",
    "description": "SFC Spread Attributes",
    "body": [
      "import * as React from \"react\";",
      "",
      "export interface I${1}Props {",
      "\tclassName?: string;",
      "\tstyle?: React.CSSProperties;",
      "}",
      "",
      "export const ${1}: React.SFC<I${1}Props> = ({ children, ...rest }) => {",
      "\treturn <div {...rest}>{children}</div>;",
      "};",
      "$0"
    ]
  },
  "State Full Component": {
    "prefix": "itp-stf",
    "description": "State Full Component",
    "body": [
      "import * as React from \"react\";",
      "",
      "export interface I${1}Props {",
      "\tlabel: string;",
      "}",
      "",
      "type IState = {",
      "\tcount: number;",
      "};",
      "",
      "export class ${1} extends React.Component<I${1}Props, IState> {",
      "\tstate: IState = {",
      "\t\tcount: 0",
      "\t};",
      "",
      "\thandleIncrement = () => {",
      "\t\tthis.setState({ count: this.state.count + 1 });",
      "\t};",
      "",
      "\trender() {",
      "\t\tconst { handleIncrement } = this;",
      "\t\tconst { label } = this.props;",
      "\t\tconst { count } = this.state;",
      "",
      "\t\treturn <div>${0}</div>;",
      "\t}",
      "}"
    ]
  },
  "Stateful with Defaults": {
    "prefix": "itp-stf-defaults",
    "description": "Stateful with Defaults",
    "body": [
      "import * as React from \"react\";",
      "",
      "export interface I${1}$Props {",
      "\tlabel: string;",
      "\t${2}?: number;",
      "}",
      "",
      "interface IDefaultProps {",
      "\t${2}: number;",
      "}",
      "",
      "interface State {",
      "\tcount: number;",
      "}",
      "",
      "export const ${1}$: React.ComponentClass<",
      "\tI${1}$Props",
      "> = class extends React.Component<I${1}$Props & IDefaultProps> {",
      "\t// to make defaultProps strictly typed we need to explicitly declare their type",
      "\t// @see https://github.com/DefinitelyTyped/DefinitelyTyped/issues/11640",
      "\tstatic defaultProps: IDefaultProps = {",
      "\t\t${2}: 0",
      "\t};",
      "",
      "\tstate: State = {",
      "\t\tcount: this.props.${2}",
      "\t};",
      "",
      "\tcomponentWillReceiveProps({ ${2} }: I${1}$Props) {",
      "\t\tif (${2} != null && ${2} !== this.props.${2}) {",
      "\t\t\tthis.setState({ count: ${2} });",
      "\t\t}",
      "\t}",
      "",
      "\thandleIncrement = () => {",
      "\t\tthis.setState({ count: this.state.count + 1 });",
      "\t};",
      "",
      "\trender() {",
      "\t\tconst { handleIncrement } = this;",
      "\t\tconst { label } = this.props;",
      "\t\tconst { count } = this.state;",
      "",
      "\t\treturn (",
      "\t\t\t<div>",
      "\t\t\t\t${0}",
      "\t\t\t\t<button type=\"button\" onClick={handleIncrement}>",
      "\t\t\t\t\t{\"Increment\"}",
      "\t\t\t\t</button>",
      "\t\t\t</div>",
      "\t\t);",
      "\t}",
      "};"
    ]
  },
  "Generic List": {
    "prefix": "itp-gen-list",
    "description": "Generic List",
    "body": [
      "import * as React from \"react\";",
      "",
      "export interface I${1}ListProps<T> {",
      "\titems: T[];",
      "\titemRenderer: (item: T) => JSX.Element;",
      "}",
      "",
      "export class ${1}List<T> extends React.Component<I${1}ListProps<T>, {}> {",
      "\trender() {",
      "\t\tconst { items, itemRenderer } = this.props;",
      "",
      "\t\treturn <div>{items.map(itemRenderer)}</div>;",
      "\t}",
      "}"
    ]
  }
}
